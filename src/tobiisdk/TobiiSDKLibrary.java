package tobiisdk;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.TypedPointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>TobiiSDK</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("TobiiSDK") 
@Runtime(CRuntime.class) 
public class TobiiSDKLibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_error_codes.h:62</i>
	 */
	public enum tobiigaze_error_code implements IntValuedEnum<tobiigaze_error_code > {
		/**
		 * success<br>
		 * This is not an error.
		 */
		TOBIIGAZE_ERROR_SUCCESS(0),
		/**
		 * generic errors<br>
		 * Unknown error.
		 */
		TOBIIGAZE_ERROR_UNKNOWN(1),
		/// Out of memory.
		TOBIIGAZE_ERROR_OUT_OF_MEMORY(2),
		/// A client allocated buffer was too small
		TOBIIGAZE_ERROR_BUFFER_TOO_SMALL(3),
		/**
		 * sync function errors<br>
		 * The operation has timed out.
		 */
		TOBIIGAZE_ERROR_TIMEOUT(100),
		/// The operation has been aborted.
		TOBIIGAZE_ERROR_OPERATION_ABORTED(101),
		/**
		 * transport errors<br>
		 * An invalid or badly formated url was supplied.
		 */
		TOBIIGAZE_ERROR_INVALID_URL(200),
		/// The name lookup failed for the supplied url.
		TOBIIGAZE_ERROR_ENDPOINT_NAME_LOOKUP_FAILED(201),
		/// Failed to connect to the specified url.
		TOBIIGAZE_ERROR_ENDPOINT_CONNECT_FAILED(202),
		/// A read or write call has failed.
		TOBIIGAZE_ERROR_DEVICE_COMMUNICATION_ERROR(203),
		/**
		 * protocol errors<br>
		 * Something has gone wrong in the decoding of the data from the Eye Tracker. This error is most likely unrecoverable.
		 */
		TOBIIGAZE_ERROR_PROTOCOL_DECODING_ERROR(300),
		/**
		 * config errors<br>
		 * Tobii Gaze Config has not been initialized.
		 */
		TOBIIGAZE_CONFIG_NOT_INITIALIZED(400),
		/// Tobii Eye Tracking isn't installed.
		TOBIIGAZE_CONFIG_TOBII_EYE_TRACKING_NOT_AVAILABLE(401),
		/// The installed version of Tobii Eye Tracking isn't compatible with this library.
		TOBIIGAZE_CONFIG_TOBII_EYE_TRACKING_INCOMPATIBLE(402),
		/// The system eye tracking configuration is incomplete.
		TOBIIGAZE_CONFIG_INCOMPLETE(403),
		/// The system eye tracking configuration is invalid.
		TOBIIGAZE_CONFIG_INVALID(404),
		/**
		 * errors from eyetracker firmware<br>
		 * The specific opcode or request is unknown. This means that the eye tracker doesn\u2019t understand what it is supposed to do with this request.
		 */
		TOBIIGAZE_FW_ERROR_UNKNOWN_OPERATION(0x20000500),
		/// The eye tracker understands the opcode or request, but does not support it.
		TOBIIGAZE_FW_ERROR_UNSUPPORTED_OPERATION(0x20000501),
		/// The request failed. This can mean different things for different requests.
		TOBIIGAZE_FW_ERROR_OPERATION_FAILED(0x20000502),
		/// The request contained invalid data. This is a severe error and indicates some kind of network problem.
		TOBIIGAZE_FW_ERROR_INVALID_PAYLOAD(0x20000503),
		/// The opcode referenced an unknown ID. This is probably caused by a programming error.
		TOBIIGAZE_FW_ERROR_UNKNOWN_ID(0x20000504),
		/// The operation cannot be completed without further authorization. (The Authorization has failed).
		TOBIIGAZE_FW_ERROR_UNAUTHORIZED(0x20000505),
		/// The operation requires enabling an extension.
		TOBIIGAZE_FW_ERROR_EXTENSION_REQUIRED(0x20000506),
		/// A generic error that indicates a bug in the firmware.
		TOBIIGAZE_FW_ERROR_INTERNAL_ERROR(0x20000507),
		/// The server or client is in a state where this request is unsupported or not allowed.
		TOBIIGAZE_FW_ERROR_STATE_ERROR(0x20000508),
		/// One or more parameters in the request were incorrect.
		TOBIIGAZE_FW_ERROR_INVALID_PARAMETER(0x20000509),
		/// The request was aborted before it could complete. This indicates that the network connection to the eye tracker was lost.
		TOBIIGAZE_FW_ERROR_OPERATION_ABORTED(0x2000050A);
		tobiigaze_error_code(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tobiigaze_error_code > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tobiigaze_error_code > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_data_types.h:71</i>
	 */
	public enum tobiigaze_log_level implements IntValuedEnum<tobiigaze_log_level > {
		TOBIIGAZE_LOG_LEVEL_OFF(0),
		TOBIIGAZE_LOG_LEVEL_DEBUG(1),
		TOBIIGAZE_LOG_LEVEL_INFO(2),
		TOBIIGAZE_LOG_LEVEL_WARNING(3),
		TOBIIGAZE_LOG_LEVEL_ERROR(4);
		tobiigaze_log_level(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tobiigaze_log_level > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tobiigaze_log_level > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_data_types.h:83</i>
	 */
	public enum tobiigaze_constants implements IntValuedEnum<tobiigaze_constants > {
		TOBIIGAZE_DEVICE_INFO_MAX_SERIAL_NUMBER_LENGTH(128),
		TOBIIGAZE_DEVICE_INFO_MAX_MODEL_LENGTH(64),
		TOBIIGAZE_DEVICE_INFO_MAX_GENERATION_LENGTH(64),
		TOBIIGAZE_DEVICE_INFO_MAX_FIRMWARE_LENGTH(128),
		TOBIIGAZE_CALIBRATION_DATA_CAPACITY(4 * 1024 * 1024),
		TOBIIGAZE_KEY_SIZE(32),
		TOBII_USB_DEVICE_INFO_MAX_SIZE(128),
		TOBII_USB_DEVICE_ADDRESS_MAX_SIZE(138),
		TOBII_USB_MAX_DEVICES(9);
		tobiigaze_constants(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tobiigaze_constants > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tobiigaze_constants > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_data_types.h:93</i>
	 */
	public enum tobiigaze_tracking_status implements IntValuedEnum<tobiigaze_tracking_status > {
		TOBIIGAZE_TRACKING_STATUS_NO_EYES_TRACKED(0),
		TOBIIGAZE_TRACKING_STATUS_BOTH_EYES_TRACKED(1),
		TOBIIGAZE_TRACKING_STATUS_ONLY_LEFT_EYE_TRACKED(2),
		TOBIIGAZE_TRACKING_STATUS_ONE_EYE_TRACKED_PROBABLY_LEFT(3),
		TOBIIGAZE_TRACKING_STATUS_ONE_EYE_TRACKED_UNKNOWN_WHICH(4),
		TOBIIGAZE_TRACKING_STATUS_ONE_EYE_TRACKED_PROBABLY_RIGHT(5),
		TOBIIGAZE_TRACKING_STATUS_ONLY_RIGHT_EYE_TRACKED(6);
		tobiigaze_tracking_status(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tobiigaze_tracking_status > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tobiigaze_tracking_status > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:522</i>
	 */
	public enum tobiigaze_tracked_eyes implements IntValuedEnum<tobiigaze_tracked_eyes > {
		TOBIIGAZE_BOTH_EYES(0),
		TOBIIGAZE_LEFT_EYE_ONLY(1),
		TOBIIGAZE_RIGHT_EYE_ONLY(2);
		tobiigaze_tracked_eyes(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<tobiigaze_tracked_eyes > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<tobiigaze_tracked_eyes > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/// Various tobiigaze constants.
	public static final int TOBIIGAZE_CONFIG_MAX_EYE_TRACKER_URL_LENGTH = 256;
	public static final int TOBIIGAZE_CONFIG_MAX_USER_PROFILE_LENGTH = 256;
	/**
	 * This type is used for the callback function that is registered with tobiigaze_add_gaze_data_listener. The callback function will be called when gaze <br>
	 * data is received from the eye tracker.<br>
	 * @param gaze_data     The received Gaze Data.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:297</i>
	 */
	/**
	 * This type is used for the callback function that is registered with tobiigaze_add_gaze_data_listener. The callback function will be called when gaze <br>
	 * data is received from the eye tracker.<br>
	 * @param gaze_data     The received Gaze Data.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:297</i>
	 */
	public static abstract class tobiigaze_gaze_listener extends Callback<tobiigaze_gaze_listener > {
		abstract public void apply(Pointer<tobiigaze_gaze_data > gaze_data, Pointer<? > user_data);
	};
	/**
	 * This type is used for callback functions that are registered with several asynchronous commands that do not have any return data. <br>
	 * The callback function will be called when the command is completed.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:304</i>
	 */
	/**
	 * This type is used for callback functions that are registered with several asynchronous commands that do not have any return data. <br>
	 * The callback function will be called when the command is completed.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:304</i>
	 */
	public static abstract class tobiigaze_async_callback extends Callback<tobiigaze_async_callback > {
		abstract public void apply(IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > error_code, Pointer<? > user_data);
	};
	/**
	 * This type is used for callback functions that are registered with several asynchronous commands that do not have any return data or an error code. <br>
	 * The callback function will be called when the command is completed.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:310</i>
	 */
	/**
	 * This type is used for callback functions that are registered with several asynchronous commands that do not have any return data or an error code. <br>
	 * The callback function will be called when the command is completed.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:310</i>
	 */
	public static abstract class tobiigaze_async_basic_callback extends Callback<tobiigaze_async_basic_callback > {
		abstract public void apply(Pointer<? > user_data);
	};
	/**
	 * This type is used for the callback function that is registered with tobiigaze_get_display_area_async. The callback function will be called <br>
	 * when the command is completed.<br>
	 * @param display_area  The retrieved Display Area.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:318</i>
	 */
	/**
	 * This type is used for the callback function that is registered with tobiigaze_get_display_area_async. The callback function will be called <br>
	 * when the command is completed.<br>
	 * @param display_area  The retrieved Display Area.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:318</i>
	 */
	public static abstract class tobiigaze_async_display_area_callback extends Callback<tobiigaze_async_display_area_callback > {
		abstract public void apply(Pointer<tobiigaze_display_area > display_area, IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > error_code, Pointer<? > user_data);
	};
	/**
	 * This type is used for the callback function that is registered with tobiigaze_get_device_info_async. The callback function will be called <br>
	 * when the command is completed.<br>
	 * @param device_info   The retrieved Device Info.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:326</i>
	 */
	/**
	 * This type is used for the callback function that is registered with tobiigaze_get_device_info_async. The callback function will be called <br>
	 * when the command is completed.<br>
	 * @param device_info   The retrieved Device Info.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:326</i>
	 */
	public static abstract class tobiigaze_async_device_info_callback extends Callback<tobiigaze_async_device_info_callback > {
		abstract public void apply(Pointer<tobiigaze_device_info > device_info, IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > error_code, Pointer<? > user_data);
	};
	/**
	 * This type is used for the callback function that is registered with tobiigaze_get_track_box_async. The callback function will be called <br>
	 * when the command is completed.<br>
	 * @param track_box     The retrieved Track Box.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:334</i>
	 */
	/**
	 * This type is used for the callback function that is registered with tobiigaze_get_track_box_async. The callback function will be called <br>
	 * when the command is completed.<br>
	 * @param track_box     The retrieved Track Box.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:334</i>
	 */
	public static abstract class tobiigaze_async_trackbox_callback extends Callback<tobiigaze_async_trackbox_callback > {
		abstract public void apply(Pointer<tobiigaze_track_box > track_box, IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > error_code, Pointer<? > user_data);
	};
	/**
	 * This type is used for the callback function that is registered with tobiigaze_get_calibration_async. The callback function will be called <br>
	 * when the command is completed.<br>
	 * @param calibration   The retrieved Calibration.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:342</i>
	 */
	/**
	 * This type is used for the callback function that is registered with tobiigaze_get_calibration_async. The callback function will be called <br>
	 * when the command is completed.<br>
	 * @param calibration   The retrieved Calibration.<br>
	 * @param error_code    Will contain an error code or 0 if no error occurred.<br>
	 * @param user_data     Optional user data that is supplied by the user and is passed unmodified to the callback function. Can be NULL.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:342</i>
	 */
	public static abstract class tobiigaze_async_calibration_callback extends Callback<tobiigaze_async_calibration_callback > {
		abstract public void apply(Pointer<tobiigaze_calibration > calibration, IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > error_code, Pointer<? > user_data);
	};
	/**
	 * This type is used for the callback function that is registered with tobiigaze_register_key_provider. The callback function will be called <br>
	 * when a eye tracker is to be unlocked.<br>
	 * @param realm_id      The realm of the eye tracker to provide the key for.<br>
	 * @param key           The key to use for unlocking the eye tracker.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:349</i>
	 */
	/**
	 * This type is used for the callback function that is registered with tobiigaze_register_key_provider. The callback function will be called <br>
	 * when a eye tracker is to be unlocked.<br>
	 * @param realm_id      The realm of the eye tracker to provide the key for.<br>
	 * @param key           The key to use for unlocking the eye tracker.<br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_callback_types.h:349</i>
	 */
	public static abstract class tobiigaze_key_provider_callback extends Callback<tobiigaze_key_provider_callback > {
		abstract public void apply(int realm_id, Pointer<tobiigaze_key > key);
	};
	/// <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:523</i>
	/// <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:523</i>
	public static abstract class tobiigaze_config_async_callback extends Callback<tobiigaze_config_async_callback > {
		abstract public void apply(IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > error_code, Pointer<? > user_data);
	};
	/**
	 * Original signature : <code>void tobiigaze_list_usb_eye_trackers(usb_device_info*, uint32_t, uint32_t*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:353</i>
	 */
	public static void tobiigaze_list_usb_eye_trackers(Pointer<usb_device_info > device_infos, int device_infos_cap, Pointer<Integer > device_infos_size, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_list_usb_eye_trackers(Pointer.getPeer(device_infos), device_infos_cap, Pointer.getPeer(device_infos_size), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_list_usb_eye_trackers(@Ptr long device_infos, int device_infos_cap, @Ptr long device_infos_size, @Ptr long error_code);
	/**
	 * Creates an eye tracker instance.<br>
	 * @param url           An url identifying the eye tracker. Currently only the tet-tcp protocol is defined. Example: "tet-tcp://172.68.195.1".     <br>
	 * @return              An eye tracker instance, or NULL if creation failed.<br>
	 * Original signature : <code>tobiigaze_eye_tracker* tobiigaze_create(const char*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:360</i>
	 */
	public static Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > tobiigaze_create(Pointer<Byte > url) {
		return Pointer.pointerToAddress(tobiigaze_create(Pointer.getPeer(url)), TobiiSDKLibrary.tobiigaze_eye_tracker.class);
	}
	@Ptr 
	protected native static long tobiigaze_create(@Ptr long url);
	/**
	 * Destroys an eye tracker instance.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_destroy(tobiigaze_eye_tracker*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:367</i>
	 */
	public static void tobiigaze_destroy(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker) {
		tobiigaze_destroy(Pointer.getPeer(eye_tracker));
	}
	protected native static void tobiigaze_destroy(@Ptr long eye_tracker);
	/**
	 * Registers a callback that will return an error code when a spontaneous error occurs (an error not directly associated with a command). Most likely <br>
	 * this error is related to problems with the eye tracker communication and is unrecoverable. <br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param callback      The callback function.<br>
	 * @param user_data     Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_register_error_callback(tobiigaze_eye_tracker*, tobiigaze_async_callback, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:376</i>
	 */
	public static void tobiigaze_register_error_callback(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_async_callback > callback, Pointer<? > user_data) {
		tobiigaze_register_error_callback(Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_register_error_callback(@Ptr long eye_tracker, @Ptr long callback, @Ptr long user_data);
	/**
	 * Gets the version of the library.<br>
	 * @return   The version of the library on the form "1.0.2".<br>
	 * Original signature : <code>char* tobiigaze_get_version()</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:382</i>
	 */
	public static Pointer<Byte > tobiigaze_get_version() {
		return Pointer.pointerToAddress(tobiigaze_get_version$2(), Byte.class);
	}
	@Ptr 
	@Name("tobiigaze_get_version") 
	protected native static long tobiigaze_get_version$2();
	/**
	 * Sets the logging output filename and verbosity.<br>
	 * @param filename              The filename of the logfile.<br>
	 * @param tobiigaze_log_level   The verbosity of the logging.<br>
	 * @return                      TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise an error code.<br>
	 * Original signature : <code>void tobiigaze_set_logging(const char*, tobiigaze_log_level, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:390</i>
	 */
	public static void tobiigaze_set_logging(Pointer<Byte > filename, IntValuedEnum<TobiiSDKLibrary.tobiigaze_log_level > level, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_set_logging(Pointer.getPeer(filename), (int)level.value(), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_set_logging(@Ptr long filename, int level, @Ptr long error_code);
	/**
	 * Connects to an eye tracker asynchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param callback      A callback function that will be called on command completion.<br>
	 * @param user_data     Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_connect_async(tobiigaze_eye_tracker*, tobiigaze_async_callback, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:398</i>
	 */
	public static void tobiigaze_connect_async(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_async_callback > callback, Pointer<? > user_data) {
		tobiigaze_connect_async(Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_connect_async(@Ptr long eye_tracker, @Ptr long callback, @Ptr long user_data);
	/**
	 * Connects to an eye tracker synchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_connect(tobiigaze_eye_tracker*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:405</i>
	 */
	public static void tobiigaze_connect(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_connect(Pointer.getPeer(eye_tracker), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_connect(@Ptr long eye_tracker, @Ptr long error_code);
	/**
	 * Disonnects from an eye tracker asynchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param callback      A callback function that will be called on command completion.<br>
	 * @param user_data     Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_disconnect_async(tobiigaze_eye_tracker*, tobiigaze_async_basic_callback, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:413</i>
	 */
	public static void tobiigaze_disconnect_async(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_async_basic_callback > callback, Pointer<? > user_data) {
		tobiigaze_disconnect_async(Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_disconnect_async(@Ptr long eye_tracker, @Ptr long callback, @Ptr long user_data);
	/**
	 * Disconnects from an eye tracker synchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * Original signature : <code>void tobiigaze_disconnect(tobiigaze_eye_tracker*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:419</i>
	 */
	public static void tobiigaze_disconnect(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker) {
		tobiigaze_disconnect(Pointer.getPeer(eye_tracker));
	}
	protected native static void tobiigaze_disconnect(@Ptr long eye_tracker);
	/**
	 * Runs the event loop. This is a blocking call and must be called on a dedicated thread.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_run_event_loop(tobiigaze_eye_tracker*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:426</i>
	 */
	public static void tobiigaze_run_event_loop(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_run_event_loop(Pointer.getPeer(eye_tracker), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_run_event_loop(@Ptr long eye_tracker, @Ptr long error_code);
	/**
	 * Breaks the event loop. This will make the blocking tobiigaze_run_event_loop call return.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_break_event_loop(tobiigaze_eye_tracker*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:433</i>
	 */
	public static void tobiigaze_break_event_loop(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker) {
		tobiigaze_break_event_loop(Pointer.getPeer(eye_tracker));
	}
	protected native static void tobiigaze_break_event_loop(@Ptr long eye_tracker);
	/**
	 * Starts gaze tracking asynchronously. <br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param callback      A callback function that will be called on command completion (note that this is not the callback that will handle the actual gaze data).<br>
	 * @param gaze_callback A callback function that will be called asynchronously when gaze data is available.<br>
	 * @param user_data     Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_start_tracking_async(tobiigaze_eye_tracker*, tobiigaze_async_callback, tobiigaze_gaze_listener, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:442</i>
	 */
	public static void tobiigaze_start_tracking_async(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_async_callback > callback, Pointer<TobiiSDKLibrary.tobiigaze_gaze_listener > gaze_callback, Pointer<? > user_data) {
		tobiigaze_start_tracking_async(Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(gaze_callback), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_start_tracking_async(@Ptr long eye_tracker, @Ptr long callback, @Ptr long gaze_callback, @Ptr long user_data);
	/**
	 * Starts gaze tracking synchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param gaze_callback A callback function that will be called asynchronously when gaze data is available.<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.      * @param user_data     Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_start_tracking(tobiigaze_eye_tracker*, tobiigaze_gaze_listener, tobiigaze_error_code*, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:450</i>
	 */
	public static void tobiigaze_start_tracking(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_gaze_listener > gaze_callback, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code, Pointer<? > user_data) {
		tobiigaze_start_tracking(Pointer.getPeer(eye_tracker), Pointer.getPeer(gaze_callback), Pointer.getPeer(error_code), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_start_tracking(@Ptr long eye_tracker, @Ptr long gaze_callback, @Ptr long error_code, @Ptr long user_data);
	/**
	 * Stops gaze tracking asynchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param callback      A callback function that will be called on command completion.<br>
	 * @param user_data     Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_stop_tracking_async(tobiigaze_eye_tracker*, tobiigaze_async_callback, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:458</i>
	 */
	public static void tobiigaze_stop_tracking_async(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_async_callback > callback, Pointer<? > user_data) {
		tobiigaze_stop_tracking_async(Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_stop_tracking_async(@Ptr long eye_tracker, @Ptr long callback, @Ptr long user_data);
	/**
	 * Stops gaze tracking synchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_stop_tracking(tobiigaze_eye_tracker*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:465</i>
	 */
	public static void tobiigaze_stop_tracking(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_stop_tracking(Pointer.getPeer(eye_tracker), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_stop_tracking(@Ptr long eye_tracker, @Ptr long error_code);
	/**
	 * Gets the device info, such as platform, versions etc, asynchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param callback      A callback function that will be called on command completion.<br>
	 * @param user_data     Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_get_device_info_async(tobiigaze_eye_tracker*, tobiigaze_async_device_info_callback, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:473</i>
	 */
	public static void tobiigaze_get_device_info_async(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_async_device_info_callback > callback, Pointer<? > user_data) {
		tobiigaze_get_device_info_async(Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_get_device_info_async(@Ptr long eye_tracker, @Ptr long callback, @Ptr long user_data);
	/**
	 * Gets the device info, such as platform, versions etc, synchronously.<br>
	 * @param eye_tracker   An eye tracker instance. <br>
	 * @param device_info   Device information out parameter.<br>
	 * @param error_code            Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_get_device_info(tobiigaze_eye_tracker*, tobiigaze_device_info*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:481</i>
	 */
	public static void tobiigaze_get_device_info(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<tobiigaze_device_info > device_info, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_get_device_info(Pointer.getPeer(eye_tracker), Pointer.getPeer(device_info), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_get_device_info(@Ptr long eye_tracker, @Ptr long device_info, @Ptr long error_code);
	/**
	 * Gets the track box asynchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param callback      A callback function that will be called on command completion.<br>
	 * @param user_data     Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_get_track_box_async(tobiigaze_eye_tracker*, tobiigaze_async_trackbox_callback, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:489</i>
	 */
	public static void tobiigaze_get_track_box_async(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_async_trackbox_callback > callback, Pointer<? > user_data) {
		tobiigaze_get_track_box_async(Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_get_track_box_async(@Ptr long eye_tracker, @Ptr long callback, @Ptr long user_data);
	/**
	 * Gets the track box synchronously.<br>
	 * @param eye_tracker   An eye tracker instance.<br>
	 * @param track_box     Track box information out parameter.<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_get_track_box(tobiigaze_eye_tracker*, tobiigaze_track_box*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:497</i>
	 */
	public static void tobiigaze_get_track_box(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<tobiigaze_track_box > track_box, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_get_track_box(Pointer.getPeer(eye_tracker), Pointer.getPeer(track_box), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_get_track_box(@Ptr long eye_tracker, @Ptr long track_box, @Ptr long error_code);
	/**
	 * Registers a callback providing a key for unlocking the eye tracker. The Tobii Gaze Core library unlocks developer edition <br>
	 * eye trackers automatically; this function can be used to unlock other eye trackers. Registering a key provider disables the built-in default key.<br>
	 * @param eye_tracker   An eye tracker instance	 <br>
	 * @param callback      The callback function<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_register_key_provider(tobiigaze_eye_tracker*, tobiigaze_key_provider_callback, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:506</i>
	 */
	public static void tobiigaze_register_key_provider(Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_key_provider_callback > callback, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_register_key_provider(Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_register_key_provider(@Ptr long eye_tracker, @Ptr long callback, @Ptr long error_code);
	/**
	 * Returns the meaning of an error code.<br>
	 * @param error_code    An error code.<br>
	 * Original signature : <code>char* tobiigaze_convert_error_code_to_string(tobiigaze_error_code)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze.h:512</i>
	 */
	public static Pointer<Byte > tobiigaze_convert_error_code_to_string(IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > error_code) {
		return Pointer.pointerToAddress(tobiigaze_convert_error_code_to_string((int)error_code.value()), Byte.class);
	}
	@Ptr 
	protected native static long tobiigaze_convert_error_code_to_string(int error_code);
	/**
	 * Load the required components and inits the interface. This must be the very first<br>
	 * call to Tobiigaze Config.<br>
	 * @param error_code Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_init(tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:531</i>
	 */
	public static void tobiigaze_config_init(Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_init(Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_init(@Ptr long error_code);
	/**
	 * Frees loaded components.<br>
	 * Original signature : <code>void tobiigaze_config_free()</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:536</i>
	 */
	native public static void tobiigaze_config_free();
	/**
	 * Validates the system eye tracking configuration.<br>
	 * @param error_code Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_validate(tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:542</i>
	 */
	public static void tobiigaze_config_validate(Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_validate(Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_validate(@Ptr long error_code);
	/**
	 * Gets the url for the default system eye tracker.<br>
	 * @param url        A buffer to receive the url.<br>
	 * @param url_size   Size of the buffer in bytes.<br>
	 * @param error_code Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_get_default_eye_tracker_url(char*, uint32_t, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:550</i>
	 */
	public static void tobiigaze_config_get_default_eye_tracker_url(Pointer<Byte > url, int url_size, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_get_default_eye_tracker_url(Pointer.getPeer(url), url_size, Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_get_default_eye_tracker_url(@Ptr long url, int url_size, @Ptr long error_code);
	/**
	 * Gets the name of the current user profile.<br>
	 * @param user_profile      A buffer to receive the name of the user profile.<br>
	 * @param user_profile_size Size of the buffer in bytes.<br>
	 * @param error_code        Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_get_current_user_profile(char*, uint32_t, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:558</i>
	 */
	public static void tobiigaze_config_get_current_user_profile(Pointer<Byte > user_profile, int user_profile_size, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_get_current_user_profile(Pointer.getPeer(user_profile), user_profile_size, Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_get_current_user_profile(@Ptr long user_profile, int user_profile_size, @Ptr long error_code);
	/**
	 * Prepares the eye tracker according to the system eye tracking configuration asynchronously.<br>
	 * @param url          An url identifying the system eye tracker. Needed as eyetracker pointer itself contains no information about url<br>
	 * @param eye_tracker  An eye tracker instance.<br>
	 * @param user_profile A user profile.<br>
	 * @param callback     A callback function that will be called on command completion.<br>
	 * @param user_data    Optional user supplied data that will be passed unmodified to the callback function. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_prepare_eye_tracker_async(const char*, const char*, tobiigaze_eye_tracker*, tobiigaze_async_callback, void*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:568</i>
	 */
	public static void tobiigaze_config_prepare_eye_tracker_async(Pointer<Byte > url, Pointer<Byte > user_profile, Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<TobiiSDKLibrary.tobiigaze_async_callback > callback, Pointer<? > user_data) {
		tobiigaze_config_prepare_eye_tracker_async(Pointer.getPeer(url), Pointer.getPeer(user_profile), Pointer.getPeer(eye_tracker), Pointer.getPeer(callback), Pointer.getPeer(user_data));
	}
	protected native static void tobiigaze_config_prepare_eye_tracker_async(@Ptr long url, @Ptr long user_profile, @Ptr long eye_tracker, @Ptr long callback, @Ptr long user_data);
	/**
	 * Prepares the eye tracker according to the system eye tracking configuration synchronously.<br>
	 * @param url          An url identifying the system eye tracker. Needed as eyetracker pointer itself contains no information about url<br>
	 * @param eye_tracker  An eye tracker instance	           <br>
	 * @param user_profile A user profile.<br>
	 * @param error_code   Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_prepare_eye_tracker(const char*, const char*, tobiigaze_eye_tracker*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:577</i>
	 */
	public static void tobiigaze_config_prepare_eye_tracker(Pointer<Byte > url, Pointer<Byte > user_profile, Pointer<TobiiSDKLibrary.tobiigaze_eye_tracker > eye_tracker, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_prepare_eye_tracker(Pointer.getPeer(url), Pointer.getPeer(user_profile), Pointer.getPeer(eye_tracker), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_prepare_eye_tracker(@Ptr long url, @Ptr long user_profile, @Ptr long eye_tracker, @Ptr long error_code);
	/**
	 * Launches the control panel for eye tracking in a separate process.<br>
	 * @param error_code Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_launch_control_panel(tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:583</i>
	 */
	public static void tobiigaze_config_launch_control_panel(Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_launch_control_panel(Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_launch_control_panel(@Ptr long error_code);
	/**
	 * Gets the bounds of the screen on which an eye tracker is mounted, in pixels, measured from the top left corner of the primary screen.<br>
	 * (In a multi-monitor setup, all the monitors are combined into a single virtual screen.)<br>
	 * @param url           An url identifying the system eye tracker.<br>
	 * @param bounds        Will receive the screen bounds in pixels.<br>
	 * @param error_code    Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_get_screen_bounds_pixels(const char*, tobiigaze_rect*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:592</i>
	 */
	public static void tobiigaze_config_get_screen_bounds_pixels(Pointer<Byte > url, Pointer<tobiigaze_rect > bounds, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_get_screen_bounds_pixels(Pointer.getPeer(url), Pointer.getPeer(bounds), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_get_screen_bounds_pixels(@Ptr long url, @Ptr long bounds, @Ptr long error_code);
	/**
	 * Gets the eye(s) to be tracked according to the current user profile.<br>
	 * @param user_profile A user profile.<br>
	 * @param tracked_eyes Will receive the eye(s) to be tracked.<br>
	 * @param error_code   Will contain an error code or 0 if no error occurred.<br>
	 * Original signature : <code>void tobiigaze_config_get_tracked_eyes(const char*, tobiigaze_tracked_eyes*, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:600</i>
	 */
	public static void tobiigaze_config_get_tracked_eyes(Pointer<Byte > user_profile, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_tracked_eyes > > tracked_eyes, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_get_tracked_eyes(Pointer.getPeer(user_profile), Pointer.getPeer(tracked_eyes), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_get_tracked_eyes(@Ptr long user_profile, @Ptr long tracked_eyes, @Ptr long error_code);
	/**
	 * Sets the logging output filename and verbosity.<br>
	 * @param filename            The filename of the logfile.<br>
	 * @param tobiigaze_log_level The verbosity of the logging.<br>
	 * @param error_code          Will be set to TOBIIGAZE_ERROR_SUCCESS if operation was succesful, otherwise to an error code. Can be NULL.<br>
	 * Original signature : <code>void tobiigaze_config_set_logging(const char*, tobiigaze_log_level, tobiigaze_error_code*)</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:608</i>
	 */
	public static void tobiigaze_config_set_logging(Pointer<Byte > filename, IntValuedEnum<TobiiSDKLibrary.tobiigaze_log_level > level, Pointer<IntValuedEnum<TobiiSDKLibrary.tobiigaze_error_code > > error_code) {
		tobiigaze_config_set_logging(Pointer.getPeer(filename), (int)level.value(), Pointer.getPeer(error_code));
	}
	protected native static void tobiigaze_config_set_logging(@Ptr long filename, int level, @Ptr long error_code);
	/**
	 * Gets the version of the library.<br>
	 * @return   The version of the library on the form "1.0.2".<br>
	 * Original signature : <code>char* tobiigaze_config_get_version()</code><br>
	 * <i>native declaration : tobii_gaze_sdk\include\tobiigaze_config.h:614</i>
	 */
	public static Pointer<Byte > tobiigaze_config_get_version() {
		return Pointer.pointerToAddress(tobiigaze_config_get_version$2(), Byte.class);
	}
	@Ptr 
	@Name("tobiigaze_config_get_version") 
	protected native static long tobiigaze_config_get_version$2();
	public static class tobiigaze_eye_tracker extends TypedPointer {
		public tobiigaze_eye_tracker(long address) {
			super(address);
		}
		public tobiigaze_eye_tracker(Pointer address) {
			super(address);
		}
	};
}
